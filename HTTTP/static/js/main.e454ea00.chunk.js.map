{"version":3,"sources":["components/Pokemons.js","containers/HomeContainer.js","App.js","serviceWorker.js","index.js"],"names":["Pokemons","this","props","name","photo","style","display","listStyle","src","alt","Component","HomeContainer","state","pokeData","axios","get","then","res","data","results","setState","catch","console","log","map","pokemon","pokeIndex","url","split","length","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oRAEqBA,E,uKACT,IAAD,EACeC,KAAKC,MAApBC,EADA,EACAA,KAAMC,EADN,EACMA,MACb,OACC,yBAAMC,MAAO,CAACC,QAAU,eAAgBC,UAAU,SAC/C,yBAAKC,IAAKJ,EAAOK,IAAI,SACrB,4BAAKN,Q,GANyBO,aCyCvBC,E,4MApCXC,MAAO,CACHC,SAAU,I,kEAEK,IAAD,OAClBC,IACGC,IAAI,sCACJC,MAAK,SAAAC,GACJ,IAAMJ,EAAWI,EAAIC,KAAKC,QAC1B,EAAKC,SAAS,CACVP,gBAGLQ,MAAMC,QAAQC,O,+BAGT,IACLV,EAAaZ,KAAKW,MAAlBC,SAGH,OAFJS,QAAQC,IAAIV,GAGJ,kBAAC,WAAD,KACA,+DACD,4BACKA,EAASW,KAAI,SAAAC,GACV,IACIC,EAAYD,EAAQE,IAAIC,MAAM,KAAKH,EAAQE,IAAIC,MAAM,KAAKC,OAAS,GAEvE,OAAO,kBAAC,EAAD,CAAU1B,KAAMsB,EAAQtB,KAAOC,MAAK,UAHnC,6EAGmC,OAAWsB,EAAX,4B,GA5B9BhB,aCOboB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.e454ea00.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Pokemons extends Component {\r\n  render() {\r\n    const {name, photo} = this.props;\r\n    return (\r\n     <div  style={{display : 'inline-block', listStyle:'none'}}>\r\n        <img src={photo} alt=\"logo\" />\r\n        <li>{name}</li>\r\n     </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {Fragment} from 'react';\r\nimport axios from \"axios\";\r\nimport Pokemons from '../components/Pokemons';\r\n\r\n\r\nclass HomeContainer extends Component {\r\n    state ={\r\n        pokeData: []\r\n    }\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://pokeapi.co/api/v2/pokemon/\")\r\n      .then(res => {\r\n        const pokeData = res.data.results;\r\n        this.setState({\r\n            pokeData\r\n        });\r\n      })\r\n      .catch(console.log);\r\n  }\r\n\r\n  render() {\r\nconst {pokeData}  = this.state;\r\nconsole.log(pokeData);\r\n\r\n    return(\r\n        <Fragment>\r\n        <h1>Pokemon de 1 Gen y evoluciones </h1>\r\n       <ul>\r\n           {pokeData.map(pokemon =>{\r\n               let url='https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/';\r\n               let pokeIndex = pokemon.url.split('/')[pokemon.url.split('/').length - 2 ];\r\n               \r\n               return <Pokemons name={pokemon.name}  photo={`${url}${pokeIndex}.png?raw=true`} />\r\n           })}\r\n       </ul> \r\n       </Fragment>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\nexport default HomeContainer;\r\n","import React from 'react';\nimport './App.css';\nimport HomeContainer from './containers/HomeContainer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomeContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}